version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: uiineed-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-uiineed_todo}
      MYSQL_USER: ${MYSQL_USER:-uiineed_todo_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --max_connections=1000
      --innodb_buffer_pool_size=512M
      --slow_query_log=1
      --long_query_time=2
      --general_log=0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 30s
    networks:
      - uiineed-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: uiineed-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 3
      interval: 30s
    networks:
      - uiineed-network

  # Spring Boot应用
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: uiineed-todo-backend
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      # 基础配置
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SERVER_PORT: ${SERVER_PORT:-8080}

      # 数据库配置
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE:-uiineed_todo}?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-uiineed_todo_user}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}

      # 数据库连接池配置
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: ${DB_POOL_MAX_SIZE:-20}
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: ${DB_POOL_MIN_IDLE:-5}
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: ${DB_POOL_IDLE_TIMEOUT:-300000}
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: ${DB_POOL_CONNECTION_TIMEOUT:-20000}
      SPRING_DATASOURCE_HIKARI_CONNECTION_TEST_QUERY: SELECT 1

      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-604800000}

      # 微信配置
      WECHAT_OPEN_APP_ID: ${WECHAT_OPEN_APP_ID}
      WECHAT_OPEN_APP_SECRET: ${WECHAT_OPEN_APP_SECRET}

      # Redis配置
      SPRING_REDIS_HOST: ${REDIS_HOST:-redis}
      SPRING_REDIS_PORT: ${REDIS_PORT:-6379}
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SPRING_REDIS_DATABASE: ${REDIS_DATABASE:-0}
      SPRING_REDIS_TIMEOUT: ${REDIS_TIMEOUT:-3000}

      # CORS配置
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,https://ricocc.com}

      # 日志配置
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL:-INFO}
      LOGGING_FILE_NAME: logs/application.log
      LOGGING_FILE_MAX_SIZE: ${LOG_FILE_MAX_SIZE:-10MB}
      LOGGING_FILE_MAX_HISTORY: ${LOG_FILE_MAX_HISTORY:-30}

    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - uiineed-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: uiineed-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - uiineed-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  uiineed-network:
    driver: bridge